# NoETL DSL Playbook for testing the postgres task type.
# This playbooks tests SQL execution in Postgres,
# noetl playbooks --register playbooks/postgres_test.yaml --port 8080
# noetl playbooks --execute --path "workflows/examples/postgres_test"
apiVersion: noetl.io/v1
kind: Playbook
name: postgres_test
path: examples/postgres_test

workload:
  jobId: "{{ job.uuid }}"
  test_data: {
    "name": "Test User",
    "email": "test@example.com",
    "metadata": {
      "age": 30,
      "active": true,
      "tags": ["test", "example", "jsonb"]
    }
  }
#  steps:
#    setup_tables: run
#    insert_data: run
#    query_data: run
#    update_data: pass


workflow:
  - step: start
    desc: "Start Postgres Test Workflow"
    next:
      - step: setup_tables

  - step: setup_tables
    desc: "Create test tables in Postgres"
    pass: "{{ workload.steps.setup_tables }}"
    type: postgres
    auth:
      pg:
        type: postgres
        key: pg_local
    command: |
      DROP TABLE IF EXISTS postgres_test_users;

      CREATE TABLE IF NOT EXISTS postgres_test_users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE OR REPLACE FUNCTION get_json_field(data JSONB, field TEXT)
      RETURNS TEXT AS $$
      BEGIN
        RETURN data->>field;
      END
      $$ LANGUAGE plpgsql;
    next:
      - step: insert_data

  - step: insert_data
    desc: "Insert test data with JSONB"
    pass: "{{ workload.steps.insert_data }}"
    type: workbook
    task: insert_data_task
    next:
      - step: query_data

  - step: query_data
    desc: "Query data including JSONB fields"
    pass: "{{ workload.steps.query_data }}"
    type: workbook
    task: query_data_task
    next:
      - step: update_data

  - step: update_data
    desc: "Update data task"
    pass: "{{ workload.steps.update_data }}"
    type: workbook
    task: update_data_task
    next:
      - step: end

  - step: end
    desc: "End of workflow"
    type: python
    code: |
      def main():
          return {
              'status': 'completed',
              'message': 'Postgres test workflow completed successfully'
          }

workbook:

  - name: create_table
    type: postgres
    auth:
      pg:
        type: postgres
        key: pg_local
    command: |
      DROP TABLE IF EXISTS postgres_test_users;

      CREATE TABLE IF NOT EXISTS postgres_test_users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );

      CREATE OR REPLACE FUNCTION get_json_field(data JSONB, field TEXT)
      RETURNS TEXT AS $$
      BEGIN
        RETURN data->>field;
      END
      $$ LANGUAGE plpgsql;


  - name: insert_data_task
    type: postgres
    auth:
      pg:
        type: postgres
        key: pg_local
    with:
      test_data: "{{ workload.test_data }}"
    command: |
      INSERT INTO postgres_test_users (name, email, metadata)
      VALUES (
        '{{ test_data.name }}',
        '{{ test_data.email }}',
        '{"age": 30, "active": true, "tags": ["test", "example", "jsonb"]}'::JSONB
      );

      INSERT INTO postgres_test_users (name, email, metadata)
      VALUES (
        'Another User',
        'another@example.com',
        '{"age": 25, "active": false, "tags": ["another", "test"]}'::JSONB
      );


  - name: query_data_task
    type: postgres
    auth:
      pg:
        type: postgres
        key: pg_local
    command: |
      SELECT 
        id, 
        name, 
        email, 
        metadata,
        created_at::TEXT as created_at
      FROM postgres_test_users;

      SELECT 
        id, 
        name, 
        email, 
        metadata,
        created_at::TEXT as created_at
      FROM postgres_test_users 
      WHERE metadata->>'active' = 'true';

      SELECT 
        id, 
        name, 
        email, 
        metadata,
        created_at::TEXT as created_at
      FROM postgres_test_users 
      WHERE metadata->'tags' ? 'test';

  - name: update_data_task
    type: postgres
    auth:
      pg:
        type: postgres
        key: pg_local
    command: |
      SELECT id, name, metadata->>'age' as age FROM postgres_test_users;
      UPDATE postgres_test_users SET metadata = jsonb_set(metadata, '{active}', 'false'::jsonb) WHERE id = 1;
      SELECT id, name, metadata->>'active' as is_active FROM postgres_test_users WHERE id = 1;
