apiVersion: noetl.io/v1
kind: Playbook
name: multi_playbook_example
path: examples/multi_playbook_example
workload:
  jobId: '{{ job.uuid }}'
  secret_name: test-secret
  environment: dev
  GOOGLE_CLOUD_PROJECT: noetl-demo-19700101
  cities:
  - name: London
    lat: 51.51
    lon: -0.13
  base_url: https://api.open-meteo.com/v1
  temperature_threshold: 26
  baseFilePath: /opt/noetl/data/test
  bucket: test-bucket
  pg_host: db
  pg_port: '5432'
  pg_user: demo
  pg_password: demo
  pg_db: demo_noetl
workflow:
- step: start
  desc: Start Multiple Playbook Example Workflow
  next:
  - step: run_secrets_test
- data:
    secret_name: '{{ workload.secret_name }}'
    GOOGLE_CLOUD_PROJECT: '{{ workload.GOOGLE_CLOUD_PROJECT }}'
  step: run_secrets_test
  desc: Run the secrets_test playbooks
  type: playbooks
  path: examples/secrets_test
  next:
  - data:
      secret_result: '{{ run_secrets_test }}'
    step: run_weather_example
- data:
    cities: '{{ workload.cities }}'
    base_url: '{{ workload.base_url }}'
    temperature_threshold: '{{ workload.temperature_threshold }}'
    secret_from_previous: '{{ secret_result }}'
  step: run_weather_example
  desc: Run the weather_example playbooks
  type: playbooks
  path: examples/weather_example
  next:
  - data:
      weather_result: '{{ run_weather_example }}'
    step: run_load_dict_test
- data:
    baseFilePath: '{{ workload.baseFilePath }}'
    bucket: '{{ workload.bucket }}'
    pg_host: '{{ workload.pg_host }}'
    pg_port: '{{ workload.pg_port }}'
    pg_user: '{{ workload.pg_user }}'
    pg_password: '{{ workload.pg_password }}'
    pg_db: '{{ workload.pg_db }}'
    weather_data: '{{ weather_result }}'
  step: run_load_dict_test
  desc: Run the load_dict_test playbooks
  type: playbooks
  path: examples/load_dict_test
  next:
  - step: store_results
- data:
    secrets_result: '{{ run_secrets_test }}'
    weather_result: '{{ run_weather_example }}'
    load_dict_result: '{{ run_load_dict_test }}'
  step: store_results
  desc: Store the results from all playbooks
  type: workbook
  task: store_results_task
  next:
  - step: end
- step: end
  desc: End of workflow
workbook:
- data:
    secrets_result: '{{ secrets_result }}'
    weather_result: '{{ weather_result }}'
    load_dict_result: '{{ load_dict_result }}'
    pg_host: '{{ workload.pg_host }}'
    pg_port: '{{ workload.pg_port }}'
    pg_user: '{{ workload.pg_user }}'
    pg_password: '{{ workload.pg_password }}'
    pg_db: '{{ workload.pg_db }}'
    execution_id: '{{ job.uuid }}'
  name: store_results_task
  type: python
  code: "def main(secrets_result, weather_result, load_dict_result, pg_host, pg_port,\
    \ pg_user, pg_password, pg_db, execution_id):\n    import duckdb\n    import json\n\
    \    import time\n    \n    # Convert results to JSON strings\n    secrets_json\
    \ = json.dumps(secrets_result) if isinstance(secrets_result, dict) else str(secrets_result)\n\
    \    weather_json = json.dumps(weather_result) if isinstance(weather_result, dict)\
    \ else str(weather_result)\n    load_dict_json = json.dumps(load_dict_result)\
    \ if isinstance(load_dict_result, dict) else str(load_dict_result)\n    \n   \
    \ # Create DuckDB connection\n    conn = duckdb.connect()\n    \n    try:\n  \
    \      # Install and load required extensions\n        conn.execute(\"INSTALL\
    \ postgres\")\n        conn.execute(\"LOAD postgres\")\n        conn.execute(\"\
    INSTALL json\")\n        conn.execute(\"LOAD json\")\n        \n        # Attach\
    \ Postgres database\n        attach_query = f\"ATTACH 'dbname={pg_db} user={pg_user}\
    \ password={pg_password} host={pg_host} port={pg_port}' AS postgres_db (TYPE postgres)\"\
    \n        try:\n            conn.execute(attach_query)\n        except Exception\
    \ as e:\n            if \"already attached\" not in str(e):\n                raise\
    \ e\n        \n        # Create local DuckDB table\n        conn.execute(\"\"\"\
    \n            CREATE TABLE IF NOT EXISTS playbook_results (\n                id\
    \ BIGINT,\n                execution_id VARCHAR,\n                secrets_result\
    \ TEXT,\n                weather_result TEXT,\n                load_dict_result\
    \ TEXT,\n                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n     \
    \       )\n        \"\"\")\n        \n        # Insert into local DuckDB table\n\
    \        current_time_ms = int(time.time() * 1000)\n        conn.execute(\"\"\"\
    \n            INSERT INTO playbook_results (\n                id, execution_id,\
    \ secrets_result, weather_result, load_dict_result\n            ) VALUES (?, ?,\
    \ ?, ?, ?)\n        \"\"\", [current_time_ms, execution_id, secrets_json, weather_json,\
    \ load_dict_json])\n        \n        # Create Postgres table\n        conn.execute(\"\
    \"\"\n            CREATE TABLE IF NOT EXISTS postgres_db.playbook_results (\n\
    \                id BIGINT PRIMARY KEY,\n                execution_id VARCHAR,\n\
    \                secrets_result TEXT,\n                weather_result TEXT,\n\
    \                load_dict_result TEXT,\n                timestamp TIMESTAMP DEFAULT\
    \ CURRENT_TIMESTAMP\n            )\n        \"\"\")\n        \n        # Insert\
    \ into Postgres table\n        conn.execute(\"\"\"\n            INSERT INTO postgres_db.playbook_results\
    \ (\n                id, execution_id, secrets_result, weather_result, load_dict_result\n\
    \            ) VALUES (?, ?, ?, ?, ?)\n        \"\"\", [current_time_ms + 1, execution_id,\
    \ secrets_json, weather_json, load_dict_json])\n        \n        # Verify insertion\n\
    \        result = conn.execute(\"SELECT COUNT(*) FROM playbook_results\").fetchone()\n\
    \        total_records = result[0] if result else 0\n        \n        return\
    \ {\n            \"status\": \"success\",\n            \"message\": \"Results\
    \ stored successfully\",\n            \"total_records\": total_records,\n    \
    \        \"execution_id\": execution_id\n        }\n        \n    except Exception\
    \ as e:\n        return {\n            \"status\": \"error\",\n            \"\
    message\": f\"Failed to store results: {str(e)}\",\n            \"execution_id\"\
    : execution_id\n        }\n    finally:\n        conn.close()\n"
