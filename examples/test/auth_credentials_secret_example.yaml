apiVersion: noetl.io/v1
kind: Playbook

metadata:
  name: auth_credentials_secret_demo
  path: examples/test/auth_credentials_secret_example

workload:
  gcs_bucket: "noetl-demo-19700101"

workflow:
  - step: ensure_pg_table
    type: postgres
    auth: pg_local
    command: |
      CREATE TABLE IF NOT EXISTS public.weather_http_raw (
        id TEXT PRIMARY KEY,
        execution_id TEXT,
        iter_index INTEGER,
        city TEXT,
        url TEXT,
        elapsed DOUBLE PRECISION,
        payload TEXT,
        created_at TIMESTAMPTZ DEFAULT now()
      );
    next:
      - step: aggregate_with_duckdb

  - step: aggregate_with_duckdb
    type: duckdb
    credentials:
      pg_db:      { key: pg_local }
      gcs_secret: { key: gcs_hmac_local }
    commands: |
      INSTALL postgres; LOAD postgres;
      INSTALL httpfs;  LOAD httpfs;

      ATTACH '' AS pg_db (TYPE postgres, SECRET pg_db);

      CREATE OR REPLACE SECRET gcs_secret (
        TYPE gcs,
        KEY_ID  '{{ credentials.gcs_secret.key_id }}',
        SECRET  '{{ credentials.gcs_secret.secret_key }}',
        SCOPE   'gs://{{ workload.gcs_bucket }}'
      );

      CREATE OR REPLACE TABLE weather_flat AS
      SELECT id, city, url, elapsed, payload
      FROM   pg_db.public.weather_http_raw
      WHERE  execution_id = '{{ execution_id }}';

      COPY weather_flat TO 'gs://{{ workload.gcs_bucket }}/weather/flat_{{ execution_id }}.parquet' (FORMAT PARQUET);
    next:
      - step: call_api

  - step: call_api
    type: http
    method: GET
    endpoint: "https://api.example.com/data"
    headers:
      Authorization: "Bearer {{ secret.api_service_token }}"
    next:
      - step: end

  - step: end
    type: noop
