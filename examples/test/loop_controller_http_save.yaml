apiVersion: noetl.io/v1
kind: Playbook
name: loop_controller_http_save
path: examples/test/loop_controller_http_save

workload:
  message: "Loop controller HTTP -> Postgres test"
  cities:
    - name: "London"
      lat: 51.51
      lon: -0.13
    - name: "Paris"
      lat: 48.85
      lon: 2.35
  base_url: "https://api.open-meteo.com/v1"

workflow:
  - step: start
    desc: "Init"
    next:
      - step: ensure_pg_table

  - step: ensure_pg_table
    desc: "Ensure raw HTTP results table exists"
    type: postgres
    credential: pg_local
    command: |
      CREATE TABLE IF NOT EXISTS public.weather_http_raw (
        id TEXT PRIMARY KEY,
        execution_id TEXT,
        iter_index INTEGER,
        city TEXT,
        url TEXT,
        elapsed DOUBLE PRECISION,
        payload TEXT,
        created_at TIMESTAMPTZ DEFAULT now()
      );
    next:
      - step: ensure_agg_table

  - step: ensure_agg_table
    desc: "Ensure aggregated HTTP results table exists"
    type: postgres
    credential: pg_local
    command: |
      CREATE TABLE IF NOT EXISTS public.weather_http_agg (
        execution_id TEXT PRIMARY KEY,
        results_json JSONB,
        count INTEGER,
        created_at TIMESTAMPTZ DEFAULT now()
      );
    next:
      - step: loop_http

  - step: loop_http
    desc: "Loop controller: HTTP per city, save each row"
    type: loop
    iterator: city
    in: "{{ workload.cities }}"
    task:
      name: fetch_weather
      type: http
      endpoint: "{{ workload.base_url }}/forecast"
      headers:
        User-Agent: "NoETL Loop Controller Demo/1.0"
      params:
        latitude: "{{ city.lat }}"
        longitude: "{{ city.lon }}"
        hourly: "temperature_2m"
        forecast_days: 1
      save:
        storage:
          kind: postgres
          credential: pg_local
        table: public.weather_http_raw
        mode: upsert
        key: id
        data:
          id: "{{ execution_id }}:{{ city.name }}:{{ _loop.current_index }}"
          execution_id: "{{ execution_id }}"
          iter_index: "{{ _loop.current_index }}"
          city: "{{ city.name }}"
          url: "{{ data.url }}"
          elapsed: "{{ data.elapsed | default(0) }}"
          payload: "{{ data | tojson }}"
    # Step-level aggregated save: write the results array and count
    save:
      storage:
        kind: postgres
        credential: pg_local
      table: public.weather_http_agg
      mode: upsert
      key: execution_id
      data:
        execution_id: "{{ execution_id }}"
        results_json: "{{ results | tojson }}"
        count: "{{ count }}"
    next:
      - step: end

  - step: end
    desc: "Finish and write metrics"
    save:
      storage:
        kind: postgres
        credential: pg_local
      table: public.weather_pipeline_metrics
      mode: upsert
      key: execution_id
      data:
        execution_id: "{{ execution_id }}"
        pg_rows_saved: "{{ loop_http.count }}"
        gcs_flat_uri: ""
        gcs_agg_uri:  ""
