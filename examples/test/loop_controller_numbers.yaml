apiVersion: noetl.io/v1
kind: Playbook
name: loop_controller_numbers
path: examples/test/loop_controller_numbers

metadata:
  name: loop_controller_numbers
  path: examples/test/loop_controller_numbers

workload:
  numbers: [1, 2, 3, 4]

workflow:
  - step: start
    next:
      - step: ensure_table

  - step: ensure_table
    desc: "Ensure results table exists"
    type: postgres
    credential: pg_local
    command: |
      CREATE TABLE IF NOT EXISTS public.loop_numbers (
        id TEXT PRIMARY KEY,
        execution_id TEXT,
        iter_index INTEGER,
        input_val INTEGER,
        output_val INTEGER,
        created_at TIMESTAMPTZ DEFAULT now()
      );
    next:
      - step: ensure_table_agg

  - step: ensure_table_agg
    desc: "Ensure aggregated results table exists"
    type: postgres
    credential: pg_local
    command: |
      CREATE TABLE IF NOT EXISTS public.loop_numbers_agg (
        execution_id TEXT PRIMARY KEY,
        results_json JSONB,
        count INTEGER,
        created_at TIMESTAMPTZ DEFAULT now()
      );
    next:
      - step: loop_numbers

  - step: loop_numbers
    desc: "Loop controller: Python per number, save each row"
    type: iterator
    collection: "{{ workload.numbers }}"
    element: n
    task:
      name: square
      type: python
      code: |
        def main(value: int):
            return {"value": int(value), "square": int(value) * int(value)}
      with:
        value: "{{ n }}"
      save:
        storage:
          kind: postgres
          credential: pg_local
        table: public.loop_numbers
        mode: upsert
        key: id
        data:
          id: "{{ execution_id }}:{{ _loop.current_index }}"
          execution_id: "{{ execution_id }}"
          iter_index: "{{ _loop.current_index }}"
          input_val: "{{ data.value }}"
          output_val: "{{ data.square }}"
    # Step-level aggregated save: write the results array and count
    save:
      storage:
        kind: postgres
        credential: pg_local
      table: public.loop_numbers_agg
      mode: upsert
      key: execution_id
      data:
        execution_id: "{{ execution_id }}"
        results_json: "{{ results | tojson }}"
        count: "{{ count }}"
    next:
      - step: end

  - step: end
    desc: "Finish"
