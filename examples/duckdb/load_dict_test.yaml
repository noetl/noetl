# NoETL DSL Playbook for testing the duckdb implementation.

apiVersion: noetl.io/v1
kind: Playbook
name: load_dict_test
path: examples/load_dict_test

workload:
  jobId: "{{ job.uuid }}"
  baseFilePath: "/opt/noetl/data/test"
  bucket: "test-bucket"
  pg_host: "{{ env.POSTGRES_HOST | default('localhost') }}"
  pg_port: "{{ env.POSTGRES_PORT | default('5432') }}"
  pg_user: "{{ env.POSTGRES_USER | default('demo') }}"
  pg_password: "{{ env.POSTGRES_PASSWORD | default('demo') }}"
  pg_db: "{{ env.POSTGRES_DB | default('demo_noetl') }}"
  # Add data directory configuration with absolute path
  data_dir: "{{ env.NOETL_DATA_DIR | default(\"/tmp/noetl/data\") }}"

workflow:
  - step: start
    desc: "Start DuckDB Test Workflow"
    next:
      - step: setup_data_dir
      
  - step: setup_data_dir
    desc: "Setup data directory with proper permissions"
    type: workbook
    task: setup_data_dir_task
    next:
      - step: test_duckdb

  - step: test_duckdb
    desc: "Test DuckDB implementation"
    type: workbook
    task: duckdb_test_task
    next:
      - step: end

  - step: end
    desc: "End of workflow"

workbook:
  - name: setup_data_dir_task
    type: python
    code: |
      def main():
          import os
          
          # Get data directory from context
          data_dir = context.get('data_dir', '/tmp/noetl/data')
          
          # Create data directory and subdirectories with proper permissions
          os.makedirs(os.path.join(data_dir, 'noetldb'), exist_ok=True)
          
          # Set environment variable for DuckDB to use
          os.environ['NOETL_DATA_DIR'] = data_dir
          
          # Print debug information
          print(f"Data directory set to: {data_dir}")
          print(f"Environment variable NOETL_DATA_DIR set to: {os.environ.get('NOETL_DATA_DIR')}")
          
          return {
              'status': 'success',
              'message': f'Data directory created at {data_dir}',
              'data_dir': data_dir
          }
          
  - name: duckdb_test_task
    type: duckdb
    command: |
      -- Install and load Duckdb Postgres extension
      INSTALL postgres;
      LOAD postgres;

      -- Connect to Postgres database
      ATTACH 'dbname={{ workload.pg_db }} user={{ workload.pg_user }} password={{ workload.pg_password }} host={{ workload.pg_host }} port={{ workload.pg_port }}' AS postgres_db (TYPE postgres);

      -- Create a test table in Duckdb
      CREATE TABLE IF NOT EXISTS test_table AS 
      SELECT 1 AS id, 'test1' AS name
      UNION ALL
      SELECT 2 AS id, 'test2' AS name
      UNION ALL
      SELECT 3 AS id, 'test3' AS name;

      -- Query the test table
      SELECT * FROM test_table;

      -- Create a Postgres table
      CREATE TABLE IF NOT EXISTS postgres_db.test_table (
          id INTEGER,
          name TEXT
      );

      -- Insert data into Postgres
      INSERT INTO postgres_db.test_table
      SELECT * FROM test_table;

      -- Query data from Postgres
      SELECT * FROM postgres_db.test_table;

      -- Clean up
      DROP TABLE IF EXISTS test_table;
    input:
      table: test_table
      file: "{{ workload.data_dir }}/test.csv"
      header: false
      bucket: "{{ workload.bucket }}"
