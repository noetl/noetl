---
apiVersion: noetl.io/v1
kind: Playbook
metadata:
  name: duckdb_snowflake_etl
  path: examples/duckdb_snowflake_etl
  description: |
    Complete ETL example using DuckDB with Snowflake extension.
    
    Demonstrates:
    - Reading from Snowflake
    - Transforming data in DuckDB
    - Writing back to Snowflake
    - Combining multiple Snowflake databases
    - Using DuckDB's analytical capabilities

workload:
  snowflake_source: snowflake_test
  snowflake_target: snowflake_test
  transform_date: "{{ 'now' | date }}"

workflow:
  - step: start
    desc: Extract data from Snowflake source
    type: duckdb
    auth:
      source_sf:
        type: snowflake
        credential: "{{ workload.snowflake_source }}"
      target_sf:
        type: snowflake
        credential: "{{ workload.snowflake_target }}"
    with:
      commands: |
        -- Install and load Snowflake extension
        INSTALL snowflake FROM community;
        LOAD snowflake;
        
        -- Create a temp table with transformed data
        CREATE TEMP TABLE transformed_sales AS
        SELECT 
          sale_id,
          customer_id,
          product_id,
          sale_date,
          amount,
          amount * 1.1 as amount_with_tax,
          CASE 
            WHEN amount > 1000 THEN 'high'
            WHEN amount > 100 THEN 'medium'
            ELSE 'low'
          END as sale_category,
          DATE_TRUNC('month', sale_date) as sale_month,
          '{{ workload.transform_date }}' as processed_date
        FROM source_sf.ANALYTICS_DB.PUBLIC.SALES
        WHERE sale_date >= CURRENT_DATE - INTERVAL '7 days'
          AND amount > 0;
        
        -- Show transformation summary
        SELECT 
          sale_category,
          COUNT(*) as record_count,
          SUM(amount) as total_amount,
          AVG(amount) as avg_amount
        FROM transformed_sales
        GROUP BY sale_category
        ORDER BY record_count DESC;
    next:
      - step: load_to_snowflake

  - step: load_to_snowflake
    desc: Load transformed data back to Snowflake
    type: duckdb
    auth:
      target_sf:
        type: snowflake
        credential: "{{ workload.snowflake_target }}"
    with:
      commands: |
        -- Reconnect to Snowflake
        INSTALL snowflake FROM community;
        LOAD snowflake;
        
        -- Create target table if not exists
        CREATE TABLE IF NOT EXISTS target_sf.ANALYTICS_DB.PUBLIC.SALES_TRANSFORMED (
          sale_id INTEGER,
          customer_id INTEGER,
          product_id INTEGER,
          sale_date DATE,
          amount DECIMAL(10,2),
          amount_with_tax DECIMAL(10,2),
          sale_category VARCHAR(20),
          sale_month DATE,
          processed_date DATE
        );
        
        -- Insert transformed data
        INSERT INTO target_sf.ANALYTICS_DB.PUBLIC.SALES_TRANSFORMED
        SELECT * FROM transformed_sales;
        
        -- Verify insertion
        SELECT COUNT(*) as inserted_records
        FROM target_sf.ANALYTICS_DB.PUBLIC.SALES_TRANSFORMED
        WHERE processed_date = '{{ workload.transform_date }}';
    next:
      - step: end

  - step: end
    desc: ETL pipeline completed successfully
