apiVersion: noetl.io/v1
kind: Playbook
name: city_process
path: examples/weather/city_process

workload:
  city: "{{ city }}"
  base_url: "{{ base_url }}"
  temperature_threshold: "{{ temperature_threshold }}"

workflow:
  - step: start
    desc: "Start city processing"
    next:
      - step: fetch_and_evaluate

  - step: fetch_and_evaluate
    desc: "Fetch and evaluate weather for one city"
    type: workbook
    task: evaluate_weather_directly
    with:
      city: "{{ workload.city }}"
      base_url: "{{ workload.base_url }}"
      threshold: "{{ workload.temperature_threshold }}"
    next:
      - step: decide

  - step: decide
    desc: "Decide alert vs log"
    type: python
    code: |
      def main(city, result):
          if isinstance(result, dict) and result.get("alert"):
              return {"action": "alert", "city": city["name"], "max_temp": result.get("max_temp", 0)}
          return {"action": "log", "city": city["name"]}
    with:
      city: "{{ workload.city }}"
      result: "{{ fetch_and_evaluate }}"
    next:
      - when: "{{ decide.action == 'alert' }}"
        then:
          - step: alert_step
            with:
              city: "{{ workload.city.name }}"
              max_temp: "{{ decide.max_temp }}"
      - else:
          - step: log_step
            with:
              city: "{{ workload.city.name }}"

  - step: alert_step
    desc: "Send alert if threshold exceeded"
    type: workbook
    task: alert_task
    with:
      city: "{{ city }}"
      temperature: "{{ max_temp }}"
    next:
      - step: end

  - step: log_step
    desc: "Log result if no alert"
    type: workbook
    task: log_task
    with:
      city: "{{ city }}"
    next:
      - step: end

  - step: end
    desc: "End of city processing"

workbook:
  - name: evaluate_weather_directly
    type: python
    with:
      city: "{{ city }}"
      threshold: "{{ threshold }}"
      base_url: "{{ base_url }}"
    code: |
      def main(city, threshold, base_url):
          import httpx
          threshold = float(threshold) if threshold not in (None, "") else 25.0
          try:
              resp = httpx.get(
                  f"{base_url}/forecast",
                  params={
                      "latitude": city["lat"],
                      "longitude": city["lon"],
                      "hourly": "temperature_2m",
                      "forecast_days": 1,
                  },
                  timeout=10.0,
              )
              resp.raise_for_status()
              data = resp.json()
          except Exception as e:
              return {"city": city["name"], "max_temp": 0.0, "alert": False, "error": str(e)}

          temps = []
          if isinstance(data, dict):
              hourly = data.get("hourly", {})
              if isinstance(hourly, dict):
                  temps = hourly.get("temperature_2m", []) or []

          max_temp = max(temps) if temps else 0.0
          return {"city": city["name"], "max_temp": max_temp, "alert": bool(max_temp > threshold)}

  - name: alert_task
    type: http
    method: POST
    endpoint: "https://postman-echo.com/post"
    payload:
      kind: "city_alert"
      city: "{{ city }}"
      temperature: "{{ temperature }}"
      message: "High temperature alert."
    timeout: 10

  - name: log_task
    type: http
    method: POST
    endpoint: "https://postman-echo.com/post"
    payload:
      kind: "city_log"
      city: "{{ city }}"
      message: "No alert needed."
    timeout: 10
