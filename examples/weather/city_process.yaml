apiVersion: noetl.io/v1
kind: Playbook
name: city_process
path: examples/weather/city_process

workload:
  city: "{{ city }}"
  base_url: "{{ base_url }}"
  temperature_threshold: "{{ temperature_threshold }}"

workflow:
  - step: start
    desc: "Start city processing"
    next:
      - step: get_forecast_step
        with:
          city: "{{ workload.city }}"
          base_url: "{{ workload.base_url }}"

  - step: get_forecast_step
    desc: "Fetch forecast for one city"
    type: http
    method: GET
    endpoint: "{{ base_url }}/forecast"
    params:
      latitude: "{{ city.lat }}"
      longitude: "{{ city.lon }}"
      hourly: "temperature_2m"
      forecast_days: 1
    next:
      - step: evaluate_weather_step

  - step: evaluate_weather_step
    desc: "Evaluate weather using fetched forecast"
    type: workbook
    task: evaluate_weather
    with:
      city: "{{ workload.city }}"
      threshold: "{{ workload.temperature_threshold }}"
      forecast_data: "{{ get_forecast }}"
    next:
      - step: decide

  - step: decide
    desc: "Decide alert vs log"
    type: python
    code: |
      def main(city, result):
          if isinstance(result, dict) and result.get("alert"):
              return {"action": "alert", "city": city["name"], "max_temp": result.get("max_temp", 0)}
          return {"action": "log", "city": city["name"]}
    with:
      city: "{{ workload.city }}"
      result: "{{ evaluate_weather }}"
    next:
      - when: "{{ decide.action == 'alert' }}"
        then:
          - step: alert_step
            with:
              city: "{{ workload.city.name }}"
              max_temp: "{{ decide.max_temp }}"
      - else:
          - step: log_step
            with:
              city: "{{ workload.city.name }}"

  - step: alert_step
    desc: "Send alert if threshold exceeded"
    type: workbook
    task: alert_task
    with:
      city: "{{ city }}"
      temperature: "{{ max_temp }}"
    next:
      - step: end

  - step: log_step
    desc: "Log result if no alert"
    type: workbook
    task: log_task
    with:
      city: "{{ city }}"
    next:
      - step: end

  - step: end
    desc: "End of city processing"

workbook:
  # - name: get_forecast
  #   type: http
  #   method: GET
  #   endpoint: "{{ base_url }}/forecast"
  #   params:
  #     latitude: "{{ city.lat }}"
  #     longitude: "{{ city.lon }}"
  #     hourly: "temperature_2m"
  #     forecast_days: 1

  - name: evaluate_weather
    type: python
    with:
      city: "{{ city }}"
      threshold: "{{ threshold }}"
      forecast_data: "{{ forecast_data }}"
    code: |
      def main(city, threshold, forecast_data):
          try:
              threshold = float(threshold) if threshold not in (None, "") else 25.0
          except Exception:
              threshold = 25.0

          temps = []
          if isinstance(forecast_data, dict):
              hourly = forecast_data.get("hourly", {})
              if isinstance(hourly, dict):
                  temps = hourly.get("temperature_2m", []) or []

          max_temp = max(temps) if temps else 0.0
          return {"city": city.get("name"), "max_temp": max_temp, "alert": bool(max_temp > threshold)}

  - name: alert_task
    type: http
    method: POST
    endpoint: "https://postman-echo.com/post"
    payload:
      kind: "city_alert"
      city: "{{ city }}"
      temperature: "{{ temperature }}"
      message: "High temperature alert."
    timeout: 10

  - name: log_task
    type: http
    method: POST
    endpoint: "https://postman-echo.com/post"
    payload:
      kind: "city_log"
      city: "{{ city }}"
      message: "No alert needed."
    timeout: 10
