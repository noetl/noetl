apiVersion: noetl.io/v1
kind: Playbook
name: city_process
path: examples/weather/city_process
workload:
  city:
    name: ''
    lat: 0
    lon: 0
  base_url: ''
  temperature_threshold: 0
workflow:
- step: start
  desc: Start city processing
  next:
  - data:
      city: '{{ workload.city }}'
      base_url: '{{ workload.base_url }}'
    step: get_forecast_step
- data:
    city: '{{ workload.city }}'
    base_url: '{{ workload.base_url }}'
  step: get_forecast_step
  desc: Debug city format and extract coordinates
  type: workbook
  task: debug_city_format
  next:
  - step: get_forecast_http_step
- data:
    debug_data: '{{ get_forecast_step }}'
    lat: '{{ get_forecast_step.lat }}'
    lon: '{{ get_forecast_step.lon }}'
  step: get_forecast_http_step
  desc: Fetch forecast via HTTP API
  type: workbook
  task: get_forecast
  next:
  - step: evaluate_weather_step
- data:
    city: '{{ workload.city }}'
    threshold: '{{ workload.temperature_threshold }}'
    forecast_data: '{{ get_forecast_http_step }}'
  step: evaluate_weather_step
  desc: Evaluate weather using fetched forecast
  type: workbook
  task: evaluate_weather
  next:
  - step: fetch_and_evaluate
- data:
    evaluation_result: '{{ evaluate_weather_step }}'
    city: '{{ workload.city }}'
  step: fetch_and_evaluate
  desc: Combined fetch and evaluate result step
  type: python
  code: "def main(evaluation_result, city):\n    # This step combines and returns\
    \ the evaluation result\n    # This is the step that the parent workflow expects\
    \ for return_step\n    result = {\n        \"city\": city.get(\"name\") if isinstance(city,\
    \ dict) else city,\n        \"evaluation\": evaluation_result,\n        \"alert\"\
    : evaluation_result.get(\"alert\", False) if isinstance(evaluation_result, dict)\
    \ else False,\n        \"max_temp\": evaluation_result.get(\"max_temp\", 0) if\
    \ isinstance(evaluation_result, dict) else 0\n    }\n    print(f\"FETCH_AND_EVALUATE:\
    \ Combined result: {result}\")\n    return result\n"
  next:
  - step: decide
- data:
    city: '{{ workload.city }}'
    result: '{{ evaluate_weather_step }}'
  step: decide
  desc: Decide alert vs log
  type: python
  code: "def main(city, result):\n    print(f\"DECIDE_STEP: Received city: {city}\"\
    )\n    print(f\"DECIDE_STEP: Received result: {result}\")\n    if isinstance(result,\
    \ dict) and result.get(\"alert\"):\n        decision = {\"action\": \"alert\"\
    , \"city\": city.get(\"name\") if isinstance(city, dict) else city, \"max_temp\"\
    : result.get(\"max_temp\", 0)}\n    else:\n        decision = {\"action\": \"\
    log\", \"city\": city.get(\"name\") if isinstance(city, dict) else city}\n   \
    \ print(f\"DECIDE_STEP: Decision: {decision}\")\n    return decision\n"
  next:
  - when: '{{ decide.action == ''alert'' }}'
    then:
    - data:
        city: '{{ workload.city.name }}'
        max_temp: '{{ decide.max_temp }}'
      step: alert_step
  - else:
    - data:
        city: '{{ workload.city.name }}'
      step: log_step
- data:
    city: '{{ workload.city.name }}'
    temperature: '{{ decide.max_temp }}'
    evaluation_result: '{{ evaluate_weather_step }}'
  step: alert_step
  desc: Send alert if threshold exceeded
  type: python
  code: "def main(city, temperature, evaluation_result):\n    # Note: This would call\
    \ the alert_task workbook task\n    # For now, just return the alert info\n  \
    \  result = {\n        \"action\": \"alert\", \n        \"city\": city, \n   \
    \     \"temperature\": temperature,\n        \"max_temp\": evaluation_result.get(\"\
    max_temp\", 0),\n        \"alert\": True\n    }\n    print(f\"ALERT_STEP: Returning\
    \ result: {result}\")\n    return result\n"
- data:
    city: '{{ workload.city.name }}'
    evaluation_result: '{{ evaluate_weather_step }}'
  step: log_step
  desc: Log result if no alert
  type: python
  code: "def main(city, evaluation_result):\n    # Note: This would call the log_task\
    \ workbook task\n    # For now, just return the log info\n    result = {\n   \
    \     \"action\": \"log\", \n        \"city\": city,\n        \"max_temp\": evaluation_result.get(\"\
    max_temp\", 0),\n        \"alert\": False\n    }\n    print(f\"LOG_STEP: Returning\
    \ result: {result}\")\n    return result\n"
- step: end
  desc: End of city processing
  result: '{{ evaluate_weather_step.result }}'
workbook:
- data:
    city: '{{ city }}'
    base_url: '{{ base_url }}'
  name: debug_city_format
  type: python
  code: "def main(city, base_url):\n    print(f\"DEBUG_CITY_FORMAT: city = {city}\"\
    )\n    print(f\"DEBUG_CITY_FORMAT: city type = {type(city)}\")\n    print(f\"\
    DEBUG_CITY_FORMAT: base_url = {base_url}\")\n    \n    # Try to extract lat/lon\n\
    \    if isinstance(city, dict):\n        lat = city.get(\"lat\")\n        lon\
    \ = city.get(\"lon\")\n        name = city.get(\"name\")\n    elif isinstance(city,\
    \ str):\n        # If it's a string, try to parse it\n        try:\n         \
    \   import ast\n            city_dict = ast.literal_eval(city)\n            lat\
    \ = city_dict.get(\"lat\")\n            lon = city_dict.get(\"lon\")  \n     \
    \       name = city_dict.get(\"name\")\n        except:\n            lat = lon\
    \ = name = None\n    else:\n        lat = lon = name = None\n        \n    print(f\"\
    DEBUG_CITY_FORMAT: extracted lat={lat}, lon={lon}, name={name}\")\n    return\
    \ {\"lat\": lat, \"lon\": lon, \"name\": name, \"original\": city}\n"
- data:
    debug_data: '{{ debug_data }}'
    lat: '{{ lat }}'
    lon: '{{ lon }}'
    latitude: '{{ lat }}'
    longitude: '{{ lon }}'
    hourly: temperature_2m
    forecast_days: 1
  name: get_forecast
  type: http
  method: GET
  endpoint: https://api.open-meteo.com/v1/forecast
  timeout: 10
- data:
    forecast_response: '{{ get_forecast }}'
    city_name: '{{ debug_data.name }}'
  name: process_forecast
  type: python
  code: "import json\n\ndef main(forecast_response, city_name):\n    print(f\"PROCESS_FORECAST:\
    \ Processing weather data for {city_name}\")\n    print(f\"PROCESS_FORECAST: Forecast\
    \ response type: {type(forecast_response)}\")\n    print(f\"PROCESS_FORECAST:\
    \ Forecast response: {forecast_response}\")\n    \n    # Extract data from HTTP\
    \ response\n    forecast_data = None\n    if isinstance(forecast_response, dict):\n\
    \        if 'data' in forecast_response:\n            # This is our Python task\
    \ format: {\"data\": {...}, \"city\": \"...\", \"status_code\": 200}\n       \
    \     forecast_data = forecast_response['data']\n        elif 'hourly' in forecast_response:\n\
    \            # This is direct HTTP response format\n            forecast_data\
    \ = forecast_response\n        else:\n            print(f\"PROCESS_FORECAST: Unexpected\
    \ response format: {forecast_response}\")\n    \n    if isinstance(forecast_data,\
    \ dict) and \"hourly\" in forecast_data:\n        temperatures = forecast_data[\"\
    hourly\"][\"temperature_2m\"]\n        max_temp = max(temperatures)\n        min_temp\
    \ = min(temperatures)\n        avg_temp = sum(temperatures) / len(temperatures)\n\
    \        \n        # Generate alert based on max temperature\n        alert_level\
    \ = \"LOW\"\n        alert_message = f\"Normal temperatures for {city_name}\"\n\
    \        \n        if max_temp > 25:\n            alert_level = \"HIGH\"\n   \
    \         alert_message = f\"High temperatures in {city_name}: {max_temp:.1f}\xB0\
    C\"\n        elif max_temp > 20:\n            alert_level = \"MEDIUM\" \n    \
    \        alert_message = f\"Warm temperatures in {city_name}: {max_temp:.1f}\xB0\
    C\"\n        \n        print(f\"PROCESS_FORECAST: {city_name} - Max: {max_temp:.1f}\xB0\
    C, Alert: {alert_level}\")\n        \n        result = {\n            \"city\"\
    : city_name,\n            \"lat\": forecast_data.get(\"latitude\"),\n        \
    \    \"lon\": forecast_data.get(\"longitude\"),\n            \"max_temp\": max_temp,\n\
    \            \"min_temp\": min_temp,\n            \"avg_temp\": avg_temp,\n  \
    \          \"alert_level\": alert_level,\n            \"alert_message\": alert_message,\n\
    \            \"timestamp\": \"2025-09-05T12:00:00Z\"\n        }\n        \n  \
    \      return result\n    else:\n        print(f\"PROCESS_FORECAST: Invalid forecast\
    \ data structure for {city_name}\")\n        print(f\"PROCESS_FORECAST: Data:\
    \ {forecast_data}\")\n        return {\n            \"city\": city_name,\n   \
    \         \"error\": \"Invalid forecast data\",\n            \"timestamp\": \"\
    2025-09-05T12:00:00Z\"\n        }\n"
- data:
    city: '{{ workload.city }}'
    threshold: '{{ workload.temperature_threshold }}'
    forecast_data: '{{ get_forecast }}'
  name: evaluate_weather
  type: python
  code: "def main(city, threshold, forecast_data):\n  print(f\"EVALUATE_WEATHER: city={city}\"\
    )\n  print(f\"EVALUATE_WEATHER: threshold raw={threshold}\")\n  print(f\"EVALUATE_WEATHER:\
    \ forecast_data type={type(forecast_data)}\")\n  try:\n    threshold_val = float(threshold)\
    \ if threshold not in (None, \"\") else 5.0\n  except Exception:\n    threshold_val\
    \ = 5.0\n  temps = []\n  if isinstance(forecast_data, dict):\n    hourly = forecast_data.get('hourly',\
    \ {})\n    if isinstance(hourly, dict) and 'temperature_2m' in hourly:\n     \
    \ temps = hourly['temperature_2m']\n    elif 'data' in forecast_data and isinstance(forecast_data['data'],\
    \ dict):\n      data_hourly = forecast_data['data'].get('hourly', {})\n      if\
    \ isinstance(data_hourly, dict) and 'temperature_2m' in data_hourly:\n       \
    \ temps = data_hourly['temperature_2m']\n  max_temp = max(temps) if temps else\
    \ 0\n  alert = max_temp > threshold_val\n  result = {\n    \"city\": city.get(\"\
    name\") if isinstance(city, dict) else city,\n    \"max_temp\": max_temp,\n  \
    \  \"alert\": alert\n  }\n  print(f\"EVALUATE_WEATHER: result={result}\")\n  return\
    \ result\n"
- name: alert_task
  type: http
  method: POST
  endpoint: https://postman-echo.com/post
  payload:
    kind: city_alert
    city: '{{ city }}'
    temperature: '{{ temperature }}'
    message: High temperature alert.
  timeout: 10
- name: log_task
  type: http
  method: POST
  endpoint: https://postman-echo.com/post
  payload:
    kind: city_log
    city: '{{ city }}'
    message: No alert needed.
  timeout: 10
