apiVersion: noetl.io/v1
kind: Playbook
name: weather
path: examples/weather/weather_example
description: "Simple weather data workflow"

workload:
  jobId: "{{ job.uuid }}"
  state: ready
  cities:
    - name: "New York"
      lat: 40.71
      lon: -74.01
  temperature_threshold: 20
  base_url: "https://api.open-meteo.com/v1"

workflow:
  - step: start
    desc: "Start weather workflow"
    next:
      - when: "{{ workload.state == 'ready' }}"
        then:
          - step: fetch_weather
      - else:
          - step: end

  - step: fetch_weather
    desc: "Fetch weather data for the city"
    type: workbook
    task: fetch_weather
    with:
      city: "{{ workload.cities[0] }}"
      threshold: "{{ workload.temperature_threshold }}"
      base_url: "{{ workload.base_url }}"
    next:
      - when: "{{ fetch_weather.alert }}"
        then:
          - step: report_warm
            with:
              city: "{{ workload.cities[0] }}"
              temperature: "{{ fetch_weather.max_temp }}"
      - else:
          - step: report_cold
            with:
              city: "{{ workload.cities[0] }}"
              temperature: "{{ fetch_weather.max_temp }}"

  - step: report_warm
    desc: "Report warm weather"
    type: python
    with:
      city: "{{ city }}"
      temperature: "{{ temperature }}"
    code: |
      def main(city, temperature):
          city_name = city["name"] if isinstance(city, dict) else str(city)
          print(f"It's warm in {city_name} ({temperature}°C)")
          return {"status": "warm", "city": city_name, "temperature": temperature}
    next:
      - step: end

  - step: report_cold
    desc: "Report cold weather"
    type: python
    name: report_cold
    with:
      city: "{{ city }}"
      temperature: "{{ temperature }}"
    code: |
      def main(city, temperature):
          city_name = city["name"] if isinstance(city, dict) else str(city)
          print(f"It's cold in {city_name} ({temperature}°C)")
          return {"status": "cold", "city": city_name, "temperature": temperature}
    next:
      - step: end

  - step: end
    desc: "End of workflow"

workbook:
  - name: fetch_weather
    type: python
    code: |
      def main(city, threshold, base_url):
          import httpx
          threshold = float(threshold) if threshold else 20
          if isinstance(city, str):
              city_dict = {"name": city, "lat": 40.71, "lon": -74.01}
          else:
              city_dict = city
          url = f"{base_url}/forecast"
          params = {
              "latitude": city_dict["lat"],
              "longitude": city_dict["lon"],
              "hourly": "temperature_2m",
              "forecast_days": 1
          }

          response = httpx.get(url, params=params)
          forecast_data = response.json()
          temps = []
          if isinstance(forecast_data, dict):
              hourly = forecast_data.get('hourly', {})
              if isinstance(hourly, dict) and 'temperature_2m' in hourly:
                  temps = hourly['temperature_2m']
          max_temp = max(temps) if temps else 0
          alert = max_temp > threshold

          # Return result
          result = {
              "city": city_dict["name"],
              "max_temp": max_temp,
              "alert": alert,
              "threshold": threshold
          }

          return result