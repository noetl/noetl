{
  "WORKFLOW": {
    "ID": "PRPSL",
    "DESCR": "ID must be unique in workflow scope",
    "START": "get-xchng-list",
    /* from which action start workflow */
    "PROPERTIES": {
    },
    "ACTIONS": {
      // get list of
      "get-xchng-list": {
        "type": "textFile",
        "descr": "the file containt list of ready to call urls of exchanges, result is array of lines",
        "run" : "./exchanges.txt", /* format: URL RESULT-FORMAT; e.g. https://api.bitfinex.com/v1/pubticker/btcusd JSON
                                                                      https://api.anexchange.com/v1/pubticker/btcusd TEXT
                                    */
        "next": ["spawn-by-line"]
      },

      "spawn-by-line" : {
        "type": "spawn",
        "descr": "spawns threads based on values list and run in parallel. each thread will have its own ${spawn-by-line}",
        "run": "${get-xchng-list}",//or ${_prevoius}
        "next": ["split-line"]
      },

      //form this point exist as many threads as values in ${get-xchng-list} array (of lines)
      "split-line": {
        "type": "expr",
        "descr": "split line by separator. ${spawn-by-line} contains value alloted for this thread, though we can use ${spawn-by-line.3} to reference the 4th value",
        "run": "split(' ',${spawn-by-line})", //split-line = [URL, FORMAT]
        "next": ["xchng-reuslt"]
      },

      "xchng-reuslt" : {
        "type":"restCall",
        "descr": "makes call to rest api. ",
        "run": {
          "method":"get",
          "url":"${split-line}[0]", //e.g. ${split-line}[0] = 'https://api.bitfinex.com/v1/pubticker/btcusd'
          "returns": "body"
        },
        "next": ["transform-result"] //adapt for different result types
      },

      "transform-result" : {
        "type": "switch",
        "descr": "choose to which transformation go, depends on second value of split-line",
        "run":{
          "value": "${split-line}[1]",
          "case": {
            "JSON": "0",// 1st element of next
            "TEXT": "1"// 2nd element of next
          }
        },
        "returns":"${xchng-reuslt}",
        "next":["from-json","collect"]
      },

      "from-json": {
          "type": "expr",
          "descr": "some exrpession language",
          "run":"asjson(${transform-result}).last_price",
          "next": ["collect"]
      },

      "collect": {
        "type": "junction",
        "descr": "just collects lines in  one place",
        "returns": "${_previous}",
        "next": ["save_file","save-jdbc"] //save to file and db

      },

      "save-file": {
        "type": "shell",
        "descr":"using shell to append result to file",
        "run":"echo 'URL: ${split-line}[0] RESULT: ${collect}' >> ./xchng.log"

      },
      "save-jdbc": {
        "type": "jdbc",
        "descr": "save to database",
        "run": {
          "connectString": "jdbc:postgresql://localhost/test?user=fred&password=secret&ssl=true",//yes, open password is issue
          "sql": "insert into ratelog (rec_date,url,rate) values (now(),${split-line}[0],${collect})"
        }
      }



    }
  }
}