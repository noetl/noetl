#
# https://github.com/lightbend/config#using-hocon-the-json-superset
#


# under review
#OS.UNIX.HOME="/tmp"
#OS.UNIX.JOB1.RUN=true

# under review
#noetldb.name = "job1"
#noetldb.host = "localhost"
#noetldb.home = ${OS.UNIX.HOME}
#noetldb.path = ${noetldb.home}
#noetldb.file = ${noetldb.name}".cfg"
#noetldb.main = ${noetldb.name}

# job1 is replaced by a process
#actions.job1.description = "workflow to create files in a floder"
#actions.job1.type = "worker"
#actions.job1.run.when = ["OS.UNIX.JOB1.RUN = true"]
#actions.job1.run.host = "localhost"
#actions.job1.run.fun.name = "workflow"
#actions.job1.run.fun.args = ["start"]
#actions.job1.run.state = "pending"
#actions.job1.run.exit.code = "0"
#actions.job1.run.message = "waitning for start"
#actions.job1.run.next = ["step1","step2"]

# top-level object must be process
# this allows having several workflows in a file
process {
  id = "1000",
  name = "job1",

# Start Event
startEvent {
  id = "1001",
  name = "start",
},

#actions.step1.description = "action to create a floder"
#actions.step1.type = "action"
#actions.step1.run.after = ["job1"]
#actions.step1.run.host = "localhost"
#actions.step1.run.fun.name = "run_shell"
#actions.step1.run.fun.args = ["mkdir /test/aaa"]
#actions.step1.run.state = "pending"
#actions.step1.run.exit.code = "0"
#actions.step1.run.message = "waitning for start"
#actions.step1.run.next = ["step2"]

# step1 is a scriptTask enhaced with custom attributes
scriptTask {
  # standard attributes
  id = "1101"
  name = "step1"

  # non-standard attributes
  script = {
    # host, function, arguments, result and so on
  }
}

#actions.step2.description = "create file"
#actions.step2.type = "action"
#actions.step2.run.after = ["job1"]
#actions.step2.run.host = "localhost"
#actions.step2.run.fun.name = "run-shell"
#actions.step2.run.fun.args = ["ls -ltr"]
#actions.step2.run.state = "pending"
#actions.step2.run.exit.code = "0"
#actions.step2.run.message = "waitning for start"
#actions.step2.run.next = ["step3","step4"]

# step2 is another scriptTask
scriptTask {
  # standard attributes
  id = "1102",
  name = "step2",
  
  # non-standard attributes
  script = {
    # blah-blah-blah
  },
},

#actions.step3.description = "call another config file"
#actions.step3.type = "config"
#actions.step3.run.after = ["step2"]
#actions.step3.run.host = "localhost"
#actions.step3.run.fun.name = "job2.cfg"
#actions.step3.run.fun.args = ["asasdasd sdfadsfadsf", "3434"]
#actions.step3.run.state = "pending"
#actions.step3.run.exit.code = "0"
#actions.step3.run.message = "waitning for start"
#actions.step3.run.next = ["step5"]

# call to another process is a callActivity
callActivity {
  id = "1103",
  name = "step3",
  calledElement = process {
    # another process definition
    name = "job2"
    source = "file://job2.conf"
  },
},

#actions.step4.description = "print execution report"
#actions.step4.type = "config"
#actions.step4.run.after = ["step2"]
#actions.step4.run.host = "localhost"
#actions.step4.run.fun.name = "config"
#actions.step4.run.fun.args = ["job3.cfg"]
#actions.step4.run.state = "pending"
#actions.step4.run.exit.code = "0"
#actions.step4.run.message = "waitning for start"
#actions.step5.run.next = ["step5"]

# call to another process is a callActivity
callActivity {
  id = "1104",
  name = "step4",
  calledElement = process {
    # another process definition
    name = "job3"
    source = "file://job3.conf"
  },
},

#actions.step5.description = "print execution report"
#actions.step5.type = "action"
#actions.step5.run.after = ["step3","step4"]
#actions.step5.run.host = "localhost"
#actions.step5.run.fun.name = "run-shell"
#actions.step5.run.fun.args = ["""echo 'job1 finished.'"""]
#actions.step5.run.state = "pending"
#actions.step5.run.exit.code = "0"
#actions.step5.run.message = "waitning for start"
#actions.step3.run.next = ["exit"]

# step5 is one more scriptTask
scriptTask {
  # standard attributes
  id = "1105",
  name = "step5",
  
  # non-standard attributes
  script = {
    # blah-blah-blah
  },
},

# end event is the final point in execution
endEvent {
 id = "9999",
 name = "finish"
},

# sequence flows are separate objects
sequenceFlow {
  id = "1001-1002",
  sourceRef = "1001",
  targetRef = "1002",
},

sequenceFlow { id="1002-1003", sourceRef="1002", targetRef="1003" },
sequenceFlow { id="1003-1004", sourceRef="1003", targetRef="1004" },
sequenceFlow { id="1004-1005", sourceRef="1004", targetRef="1005" },
sequenceFlow { id="1005-9999", sourceRef="1005", targetRef="9999" },

} // process
