{
	"workflow1": {
		"type": "workflow",
		"displayName": "BTC/USD average exchange rate",
		"description": "Retrieves BTC/USD exchange rate from 3 different exchanges, calculates an average and puts the latter into db",
		"input": { "httpClientTimeout": "${httpClientTimeout}" },
		"start": ["fork1"],
		"fork1": {
			"type": "fork",
			"displayName": "fork1",
			"description": "Starts parallel execution",
			"next": ["websvc101", "websvc201", "websvc301"],
		},
		"websvc101": {
			"type": "webservice",
			"displayName": "CEX.io",
			"description": "Request BTC/USD rate from CEX.io",
			"next": ["websvc102"],
			"run": {
			  "httpClientTimeout": "${inputData.httpClientTimeout}",
			  "httpMethod": "GET",
			  "url": "https://cex.io/api/last_price/BTC/USD",
			  "output": "${responseBody}",
			  }
		},
		"websvc102": {
			"type": "webservice",
			"displayName": "CEX.io-Transform",
			"description": "Transforms answer from CEX.io to a canonical form",
			"next": ["join401"],
			"run": {
			  "httpClientTimeout": "${inputData.httpClientTimeout}",
			  "httpMethod": "POST",
			  "contentType": "application/json",
			  "url": "https://localservice.noetl.io/transform-cexio",
			  "requestBody": "${input}",
			"output": "${responseBody}",
			}
		},
		"websvc201": {
			"type": "webservice",
			"displayName": "Bitfinex",
			"description": "Request BTC/USD rate from Bitfinex",
			"next": ["jdbc202"],
			"run": {
			  "httpClientTimeout": "${inputData.httpClientTimeout}",
			  "httpMethod": "GET",
			  "url": "https://api.bitfinex.com/v1/pubticker/btcusd",
			  "output": "${responseBody}"
			}
		},
		"jdbc202": {
			"type": "jdbc",
			"displayName": "Bitfinex-Transform",
			"description": "Transforms answer from Bitfinex to a canonical form",
            "next": ["join401"],
			"run": {
			"databaseURL": "jdbc:postgresql://localhost/test?user=fred&password=secret&ssl=true",
			"queryString": "SELECT public.bitfinex_to_canonical($1)",
			"queryParams": [ "${input}" ],
			"output": "${queryResult}",
			}
		},
		"websvc301": {
			"type": "webservice",
			"displayName": "HitBTC",
			"description": "Request BTC/USD rate from HitBTC",
            "next": ["shell302"],
			"run": {
			  "httpClientTimeout": "${inputData.httpClientTimeout}",
			  "httpMethod": "GET",
			  "url": "https://api.hitbtc.com/api/2/public/ticker/BTCUSD",
			  "output": "${responseBody}",
			}
		},
		"shell302": {
			"type": "shell",
			"displayName": "HitBTC-Transform",
			"description": "Transforms answer from HitBTC to a canonical form",
            "next": ["join401"],
			"run": {
			  "shellScript": "/usr/local/bin/transform-hitbtc",
			  "scriptParams": [ "${inputData}" ],
			  "output": "${stdout}"
			}
		},
		"join401": {
			"type": "join",
			"displayName": "join401",
			"description": "",
			"next": ["ssh501"]
		},
		"ssh501": {
			"type": "ssh",
			"displayName": "Calc-average",
			"description": "Calculates average BTC/USD rate on a remote host",
            "next": ["scp601"],
			"run": {
			  "sshHost": "scripthost.noetl.io",
			  "sshPort": "22", // note string here, not number!
			  "sshUser": "scripter",
			  "sshIdentityFile": "/home/noetl/ssh-keys/scripthost.pem",
			  "shellScript": "/usr/local/bin/calc-average",
			  "scriptParams": "${input}"
			}
		},
		"scp601": {
			"type": "scp",
			"displayName": "Transfer average rate",
			"description": "Transfers the average result from remote host to local machine",
			"sourceHost": "scripthost.noetl.io",
			"sourcePort": "22",
			"sourceUser": "scripter",
			"sourceIdentifyFile": "/home/noetl/ssh-keys/scripthost.pem",
			"sourcePath": "/usr/local/var/calc-average/current-rate",
			"targetHost": "localhost",
			"targetPath": "/usr/local/var/calc-average/",
			"overwriteTarget": "always",
			"next": ["shell701"]
		},
		"shell701": {
			"type": "shell",
			"displayName": "Print average rate",
			"description": "Prints average BTC/USD rate in the canonical form",
            "next": ["jdbc801"],
			"run": {
			  "shellScript": "cat /usr/local/var/calc-average/current-rate", // local file, remember?
			  "output": "${stdout}" // shell's stdout will be copied to next actions
			}
		},
		"jdbc801": {
			"type": "jdbc",
			"displayName": "Save to database",
			"description": "Saves the average BTC/USD rate to database",
            "next": ["end"], // the final destination of each workflow is end
			"run": {
			  "databaseURL": "jdbc:postgresql://localhost/test?user=fred&password=secret&ssl=true",
			  "queryString": "SELECT public.append_btc_usd_rate($1::json)",
			  "queryParams": [ "${input}" ],
			"output": "${queryResult}"
			}
		}
}