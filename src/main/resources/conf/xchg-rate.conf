// This script should do the following:
// 1. Request BTC/USD exchange rate from 3 different cryptocurrency exchanges using their public APIs. 
// The calls to exchanges shall be done in parallel.
// 2. Receive a request from each exchange and transform it to canonical data model.
// 3. Calculate average composite exchange rate using exchange rates from different exchanges.
// 4. Write the exchange rate into the database.

// process is a top-level action container
process {
	id = "xchg-rate",
	name = "xchg-rate",
	description = "Retrieves BTC/USD exchange rate from 5 different exchanges, calculates an average and puts the latter into db",
	
	// process starts from its startEvent
	startEvent {
		id = "0000",
		name = "Start",
	},
	
	sequenceFlow {
		id = "0000-1001",
		name = "",
	},
	
	parallelGateway {
		id = "0101",
		name = "",
	},
	
	webServiceTask {
		id = "1001",
		name = "Poloniex",
		description = "Request BTC/USD rate from Poloniex",
		httpClientTimeout = "3s",
		httpMethod = "GET",
		url = "...",
		outputData = "{httpBody}"
	},
	
	webServiceTask {
		id = "2001",
		name = "Poloniex-Transform"
		description = "Transforms answer from Poloniex to a canonical form",
		httpClientTimeout = "3s",
		httpMethod = "POST",
		contentType = "x-form-urlencoded",
		url = "...",
		formData = "poloniex={sequenceFlow.data}", // placeholder for receiving data from incoming sequenceFlow
	},

	webServiceTask {
		id = "1002",
		name = "Bittrex",
		description = "Request BTC/USD rate from Bittrex",
		httpClientTimeout = "3s",
		httpMethod = "GET",
		url = "...",
	},
	
	webServiceTask {
		id = "2002",
		name = "Bittrex-Transform"
		description = "Transforms answer from Bittrex to a canonical form",
		httpClientTimeout = "3s",
		httpMethod = "POST",
		url = "...",
		contentType = "application/json"
		contentBody = "{sequenceFlow.data}", // json from incoming sequenceFlow
	},

	webServiceTask {
		id = "1003",
		name = "Bitfinex",
		description = "Request BTC/USD rate from Bitfinex",
		httpClientTimeout = "3s",
		httpMethod = "POST",
		url = "...",
		formData = "", // POST form data
	},
	
	shellTask {
		id = "2003",
		name = "Bitfinex-Transform"
		description = "Transforms answer from Bitfinex to a canonical form",
		shellScript = "~/bin/"
		outputData = "stdin"
	},

	// the final destination of each process is the endEvent
	endEvent {
		id = "9999",
		name = "Finish",
	},

	
}
