version: '3.45'

# NoETL Test Task Automation
# ===========================
# Key workflows:
# - setup-test-environment: Register all credentials and test playbooks (one-time setup)
# - register-all-test-playbooks: Register all test playbooks from fixtures directory  
# - test-create-tables: Create database tables required for save storage tests
# - test-*-full: Complete test workflows including setup, table creation, and execution
# - test-save-storage-all: Run complete save storage test suite with optimized setup
env:
  NOETL_HOST: localhost
  NOETL_PORT: 8082

tasks:
  # === Test Tasks ===
  playbook:k8s:register-control-flow-workbook:
    desc: Register control flow workbook playbook
    aliases: [trcfw, test-register-control-flow-workbook]
    cmds:
      - task: kubectl:local:context-set-kind
      - .venv/bin/noetl register tests/fixtures/playbooks/control_flow_workbook/control_flow_workbook.yaml --host {{ .NOETL_HOST }} --port {{ .NOETL_PORT }}

  playbook:k8s:execute-control-flow-workbook:
    desc: Execute control flow workbook test
    aliases: [tecfw, test-execute-control-flow-workbook]
    cmds:
      - task: kubectl:local:context-set-kind
      - .venv/bin/noetl execute playbook "tests/fixtures/playbooks/control_flow_workbook" --host {{ .NOETL_HOST }} --port {{ .NOETL_PORT }} --json

  playbook:k8s:full-control-flow-workbook:
    desc: Full control flow workbook test
    aliases: [tcfwf, test-control-flow-workbook-full]
    cmds:
      - task: test:k8s:setup-environment
      - sleep 2
      - task: playbook:k8s:execute:control-flow-workbook

  test:k8s:cluster-health:
    desc: Check cluster health and endpoints
    aliases: [tch, test-cluster-health]
    cmds:
      - task: kubectl:local:context-set-kind
      - echo "=== Checking NoETL server health ==="
      - curl -f http://localhost:8082/api/health || echo "NoETL server not ready"
      - echo "\n=== Checking PostgreSQL connection ==="
      - kubectl exec deployment/postgres -n postgres -- pg_isready -h localhost -p 5432 -U demo
      - echo "\n=== Checking services ==="
      - kubectl get svc -A | grep -E "noetl|postgres"

  test:local:create-tables:
    desc: Create database tables for save storage tests
    aliases: [tctl, test-create-tables-local]
    cmds:
      - |
        set -e
        echo "=== Creating database tables for save storage tests (local) ==="
        
        # Check if local server is running
        if ! curl -s -m 2 -f "http://localhost:8083/health" >/dev/null 2>&1; then
          echo "ERROR: NoETL server is not running on port 8083"
          echo "Please start the server first with: task noetl:local-server-debug"
          exit 1
        fi
        
        if [ -x ".venv/bin/noetl" ]; then
          cli=".venv/bin/noetl"
        else
          cli="noetl"
        fi
        
        echo "Executing create_tables playbook with local postgres credentials..."
        $cli execute playbook "tests/fixtures/playbooks/save_storage_test/create_tables" \
          --host localhost --port 8083 \
          --payload '{"pg_auth": "pg_local"}' --merge --json
        echo "âœ“ Database tables created successfully"

  playbook:local:execute:
    desc: Execute a test playbook with local postgres credentials
    aliases: [tel, test-execute-local]
    vars:
      PLAYBOOK: "{{ or .PLAYBOOK \"\" }}"
      HOST: "{{ or .HOST \"localhost\" }}"
      PORT: "{{ or .PORT \"8083\" }}"
    cmds:
      - |
        set -e
        playbook="{{.PLAYBOOK}}"
        host="{{.HOST}}"
        port="{{.PORT}}"
        
        if [ -z "$playbook" ]; then
          echo "ERROR: PLAYBOOK parameter is required"
          echo "Usage: task playbook:local:execute PLAYBOOK=tests/fixtures/playbooks/save_storage_test/save_simple_test [HOST=localhost] [PORT=8083]"
          exit 1
        fi
        
        # Check if server is running
        echo "Checking if NoETL server is running on $host:$port..."
        if ! curl -s -m 2 -f "http://$host:$port/health" >/dev/null 2>&1; then
          echo "ERROR: NoETL server is not running on $host:$port"
          echo "Please start the server first"
          exit 1
        fi
        
        if [ -x ".venv/bin/noetl" ]; then
          cli=".venv/bin/noetl"
        else
          cli="noetl"
        fi
        
        echo "Executing playbook: $playbook on $host:$port (with local postgres credentials)"
        $cli execute playbook "$playbook" \
          --host "$host" --port "$port" \
          --payload '{"pg_auth": "pg_local"}' --merge --json


  test:k8s:register-credentials:
    desc: Register test credentials
    aliases: [rtc, register-test-credentials]
    cmds:
      - task: kubectl:local:context-set-kind
      - echo "=== Registering pg_k8s credential ==="
      - |
        if command -v jq >/dev/null 2>&1; then
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/pg_k8s.json | jq -C .
        else
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/pg_k8s.json
        fi
      - echo "\n=== Registering gcs_hmac_local credential ==="
      - |
        if command -v jq >/dev/null 2>&1; then
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/gcs_hmac_local.json | jq -C .
        else
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/gcs_hmac_local.json
        fi
      - echo "\n=== Registering pg_local credential ==="
      - |
        if command -v jq >/dev/null 2>&1; then
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/pg_local.json | jq -C .
        else
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/pg_local.json
        fi
      - echo "\n=== Registering sf_test credential ==="
      - |
        if command -v jq >/dev/null 2>&1; then
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/sf_test.json | jq -C .
        else
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/sf_test.json
        fi
      - echo "\n=== Test credentials registered successfully ==="

  test:k8s:register-playbooks:
    desc: Register all test playbooks
    aliases: [rtp, register-test-playbooks]
    cmds:
      - task: kubectl:local:context-set-kind
      - echo "=== Registering all test playbooks ==="
      - ./register_test_playbooks.sh {{ .NOETL_HOST }} {{ .NOETL_PORT }}
      - echo "=== All test playbooks registered successfully ==="

  test:k8s:setup-environment:
  # before run we need go to https://console.cloud.google.com/security/secret-manager/secret/gcs_hmac_local/versions?project=noetl-demo-19700101
  # copy and paste to tests/fixtures/credentials/gcs_hmac_local.json the values for key_id and secret
    desc: Complete test environment setup
    aliases: [ste, setup-test-environment]
    cmds:
      - echo "=== Setting up complete test environment ==="
      - task: test:k8s:register-credentials
      - sleep 2
      - task: test:k8s:register-playbooks
      - echo "=== Test environment setup completed ==="




  # === Save Storage Test Tasks ===
  test:k8s:create-tables:
    desc: Create database tables for save storage tests
    aliases: [tct]
    cmds:
      - task: kubectl:local:context-set-kind
      - echo "=== Creating database tables for save storage tests ==="
      - .venv/bin/noetl execute playbook "tests/fixtures/playbooks/save_storage_test/create_tables" --host {{.NOETL_HOST}} --port {{.NOETL_PORT}} --json
      - sleep 10
      - echo "=== Database tables created successfully ==="




  test:k8s:validate-save-storage:
    desc: Validate save storage test environment
    aliases: [vsst]
    cmds:
      - task: kubectl:local:context-set-kind
      - echo "=== Running Save Storage Test Validation ==="
      - tests/fixtures/playbooks/save_storage_test/validate_tests.sh validate
      - echo "=== Save Storage Test Validation Completed ==="

  # === Retry Test Tasks ===
  
  playbook:local:register-retry-tests:
    desc: Register all retry test playbooks
    aliases: [trrt, test-register-retry-tests]
    cmds:
      - |
        set -e
        echo "=== Registering retry test playbooks ==="
        
        if [ -x ".venv/bin/noetl" ]; then
          cli=".venv/bin/noetl"
        else
          cli="noetl"
        fi
        
        # Register each retry test playbook
        echo "Registering HTTP retry status code test..."
        $cli register tests/fixtures/playbooks/retry_test/http_retry_status_code.yaml --host localhost --port 8083
        
        echo "Registering HTTP retry with stop condition test..."
        $cli register tests/fixtures/playbooks/retry_test/http_retry_with_stop.yaml --host localhost --port 8083
        
        echo "Registering Python exception retry test..."
        $cli register tests/fixtures/playbooks/retry_test/python_retry_exception.yaml --host localhost --port 8083
        
        echo "Registering DuckDB query retry test..."
        $cli register tests/fixtures/playbooks/retry_test/duckdb_retry_query.yaml --host localhost --port 8083
        
        echo "Registering simple retry config test..."
        $cli register tests/fixtures/playbooks/retry_test/retry_simple_config.yaml --host localhost --port 8083
        
        echo "âœ“ All retry test playbooks registered successfully"




  test:local:retry-all:
    desc: Run all retry tests
    aliases: [tra, test-retry-all]
    cmds:
      - task: noetl:local:reset
      - task: playbook:local:register-retry-tests
      - echo "\n=== Running HTTP status code retry test ==="
      - task: playbook:local:execute:retry-http-status
      - echo "\n=== Running HTTP stop condition retry test ==="
      - task: playbook:local:execute-retry-http-stop
      - echo "\n=== Running Python exception retry test ==="
      - task: playbook:local:execute-retry-python-exception
      - echo "\n=== Running DuckDB retry test ==="
      - task: playbook:local:execute-retry-duckdb
      - echo "\n=== Running simple config retry test ==="
      - task: playbook:local:execute-retry-simple-config
      - echo "\n=== All retry tests completed ==="
