version: '3.45'

tasks:
  # === Test Tasks ===
  test-register-control-flow-workbook:
    desc: Register control flow workbook playbook to cluster
    aliases: [trcfw]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 30082
    cmds:
      - kubectl config use-context kind-noetl
      - .venv/bin/noetl register tests/fixtures/playbooks/control_flow_workbook/control_flow_workbook.yaml --host {{ .NOETL_HOST }} --port {{ .NOETL_PORT }}

  test-execute-control-flow-workbook:
    desc: Execute control flow workbook test on cluster
    aliases: [tecfw]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 30082
    cmds:
      - kubectl config use-context kind-noetl
      - .venv/bin/noetl execute playbook "tests/fixtures/playbooks/control_flow_workbook" --host {{ .NOETL_HOST }} --port {{ .NOETL_PORT }} --json

  test-control-flow-workbook-full:
    desc: Full test - register and execute control flow workbook on cluster
    aliases: [tcfwf]
    cmds:
      - task: test-register-control-flow-workbook
      - sleep 2
      - task: test-execute-control-flow-workbook

  test-cluster-health:
    desc: Check cluster health and endpoints
    aliases: [tch]
    cmds:
      - kubectl config use-context kind-noetl
      - echo "=== Checking NoETL server health ==="
      - curl -f http://localhost:8082/api/health || echo "NoETL server not ready"
      - echo "\n=== Checking PostgreSQL connection ==="
      - kubectl exec deployment/postgres -n postgres -- pg_isready -h localhost -p 5432 -U demo
      - echo "\n=== Checking services ==="
      - kubectl get svc -A | grep -E "noetl|postgres"

  register-test-credentials:
    desc: Register test credentials (pg_k8s and gcs_hmac_local) to cluster
    aliases: [rtc]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 8082
    cmds:
      - kubectl config use-context kind-noetl
      - echo "=== Registering pg_k8s credential ==="
      - |
        if command -v jq >/dev/null 2>&1; then
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/pg_k8s.json | jq -C .
        else
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/pg_k8s.json
        fi
      - echo "\n=== Registering gcs_hmac_local credential ==="
      - |
        if command -v jq >/dev/null 2>&1; then
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/gcs_hmac_local.json | jq -C .
        else
          curl -sS -X POST "http://localhost:8082/api/credentials" \
            -H 'Content-Type: application/json' \
            --data-binary @tests/fixtures/credentials/gcs_hmac_local.json
        fi
      - echo "\n=== Test credentials registered successfully ==="

  test-register-http-duckdb-postgres:
    desc: Register HTTP DuckDB Postgres playbook to cluster
    aliases: [trhdp]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 8082
    cmds:
      - kubectl config use-context kind-noetl
      - .venv/bin/noetl register tests/fixtures/playbooks/http_duckdb_postgres/http_duckdb_postgres.yaml --host localhost --port 8082

  test-execute-http-duckdb-postgres:
    desc: Execute HTTP DuckDB Postgres test on cluster
    aliases: [tehdp]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 8082
    cmds:
      - kubectl config use-context kind-noetl
      - .venv/bin/noetl execute playbook "tests/fixtures/playbooks/http_duckdb_postgres" --host localhost --port 8082 --json

  test-http-duckdb-postgres-full:
    desc: Full test - register credentials, register playbook, and execute HTTP DuckDB Postgres test
    aliases: [thdpf]
    cmds:
      - task: register-test-credentials
      - sleep 2
      - task: test-register-http-duckdb-postgres
      - sleep 2
      - task: test-execute-http-duckdb-postgres

  test-register-playbook-composition:
    desc: Register playbook composition test to cluster
    aliases: [trpc]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 8082
    cmds:
      - kubectl config use-context kind-noetl
      - .venv/bin/noetl register tests/fixtures/playbooks/playbook_composition/playbook_composition.yaml --host localhost --port 8082

  test-execute-playbook-composition:
    desc: Execute playbook composition test on cluster
    aliases: [tepc]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 8082
    cmds:
      - kubectl config use-context kind-noetl
      - .venv/bin/noetl execute playbook "tests/fixtures/playbooks/playbook_composition/playbook_composition" --host localhost --port 8082 --json

  test-playbook-composition-full:
    desc: Full test - register credentials, register playbook, and execute playbook composition test
    aliases: [tpcf]
    cmds:
      - task: register-test-credentials
      - sleep 2
      - task: test-register-playbook-composition
      - sleep 2
      - task: test-execute-playbook-composition

  test-register-hello-world:
    desc: Register hello world playbook to cluster
    aliases: [trhw]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 8082
    cmds:
      - kubectl config use-context kind-noetl
      - .venv/bin/noetl register tests/fixtures/playbooks/hello_world/hello_world.yaml --host {{ .NOETL_HOST }} --port {{ .NOETL_PORT }}

  test-execute-hello-world:
    desc: Execute hello world test on cluster
    aliases: [tehw]
    env:
      NOETL_HOST: localhost
      NOETL_PORT: 8082
    cmds:
      - kubectl config use-context kind-noetl
      - .venv/bin/noetl execute playbook "tests/fixtures/playbooks/hello_world" --host {{ .NOETL_HOST }} --port {{ .NOETL_PORT }} --json

  test-hello-world-full:
    desc: Full test - register and execute hello world test
    aliases: [thwf]
    cmds:
      - task: test-register-hello-world
      - sleep 2
      - task: test-execute-hello-world
