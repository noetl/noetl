apiVersion: noetl.io/v1
kind: Playbook

metadata:
  name: unified_auth_demo
  path: tests/unified_auth_demo

workload:
  gcs_bucket: "noetl-demo-19700101"

workflow:
  - step: ensure_pg_table
    type: postgres
    auth:
      pg:
        type: postgres
        key: pg_local
    command: |
      CREATE TABLE IF NOT EXISTS public.weather_http_raw (
        id TEXT PRIMARY KEY,
        execution_id TEXT,
        iter_index INTEGER,
        city TEXT,
        url TEXT,
        elapsed DOUBLE PRECISION,
        payload TEXT,
        created_at TIMESTAMPTZ DEFAULT now()
      );
    next:
      - step: aggregate_with_duckdb

  - step: aggregate_with_duckdb
    desc: "DuckDB step with unified auth dictionary"
    type: duckdb
    auth:
      pg_db:
        type: postgres
        key: pg_local
        secret_name: pg_db  # DuckDB secret name
      gcs_store:
        type: hmac
        service: gcs
        key: gcs_hmac_local
        scope: "gs://{{ workload.gcs_bucket }}"
    commands: |
      -- Extensions and secrets are auto-created by unified auth system
      -- INSTALL postgres; LOAD postgres;  -- Auto-installed
      -- INSTALL httpfs;  LOAD httpfs;     -- Auto-installed
      
      -- Auto-created secrets can be used directly
      ATTACH '' AS pg_db (TYPE postgres, SECRET pg_db);
      
      -- GCS secret is auto-created with proper scope
      CREATE OR REPLACE TABLE weather_flat AS
      SELECT id, city, url, elapsed, payload
      FROM   pg_db.public.weather_http_raw
      WHERE  execution_id = '{{ execution_id }}';

      -- Cloud storage works automatically with scoped credentials
      COPY weather_flat TO 'gs://{{ workload.gcs_bucket }}/weather/flat_{{ execution_id }}.parquet' (FORMAT PARQUET);
    next:
      - step: call_api_with_unified_auth

  - step: call_api_with_unified_auth
    desc: "HTTP step with unified auth for bearer token"
    type: http
    method: GET
    endpoint: "https://api.example.com/data"
    auth:
      api_service:
        type: bearer
        key: api_service_token
        provider: secret_manager  # Fetch from external secret manager
    # No need to specify headers - auth system auto-generates them
    # But you can still access fields in templates if needed:
    # headers:
    #   Authorization: "Bearer {{ auth.api_service.token }}"
    #   X-Custom: "Using unified auth system"
    next:
      - step: demonstrate_multiple_auth_types

  - step: demonstrate_multiple_auth_types
    desc: "HTTP step demonstrating multiple auth types"
    type: http
    method: POST
    endpoint: "https://api.example.com/secure"
    auth:
      bearer_auth:
        type: bearer
        key: api_bearer_token
      api_key_auth:
        type: api_key
        key: api_key_token
        header: "X-API-Key"
      basic_auth:
        type: basic
        key: basic_credentials
      custom_header:
        type: header
        name: "X-Custom-Auth"
        value: "{{ execution_id }}"
    # All auth types will add their respective headers automatically
    next:
      - step: end

  - step: end
    type: noop
