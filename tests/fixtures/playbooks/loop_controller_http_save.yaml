apiVersion: noetl.io/v1
kind: Playbook

metadata:
  name: loop_controller_http_save
  path: tests/loop_controller_http_save

workload:
  message: Loop controller HTTP -> Postgres test
  cities:
  - name: London
    lat: 51.51
    lon: -0.13
  - name: Paris
    lat: 48.85
    lon: 2.35
  base_url: https://api.open-meteo.com/v1
workflow:
- step: start
  desc: Init
  next:
  - step: ensure_pg_table
- step: ensure_pg_table
  desc: Ensure raw HTTP results table exists
  type: postgres
  auth:
    pg:
      type: postgres
      key: pg_local
  command: |
    CREATE TABLE IF NOT EXISTS public.weather_http_raw (
      id TEXT PRIMARY KEY,
      execution_id TEXT,
      iter_index INTEGER,
      city TEXT,
      url TEXT,
      elapsed DOUBLE PRECISION,
      payload TEXT,
      created_at TIMESTAMPTZ DEFAULT now()
    );
  next:
  - step: ensure_agg_table
- step: ensure_agg_table
  desc: Ensure aggregated HTTP results table exists
  type: postgres
  auth:
    pg:
      type: postgres
      key: pg_local
  command: |
    CREATE TABLE IF NOT EXISTS public.weather_http_agg (
      execution_id TEXT PRIMARY KEY,
      results_json JSONB,
      count INTEGER,
      created_at TIMESTAMPTZ DEFAULT now()
    );
  next:
  - step: loop_http
- step: loop_http
  desc: 'Loop controller: HTTP per city, save each row'
  type: iterator
  collection: '{{ workload.cities }}'
  element: city
  task:
    data:
      latitude: '{{ city.lat }}'
      longitude: '{{ city.lon }}'
      hourly: temperature_2m
      forecast_days: 1
    name: fetch_weather
    type: http
    endpoint: '{{ workload.base_url }}/forecast'
    headers:
      User-Agent: NoETL Loop Controller Demo/1.0
    save:
      data:
        id: '{{ execution_id }}:{{ city.name }}:{{ loop_http.result_index }}'
        execution_id: '{{ execution_id }}'
        iter_index: '{{ loop_http.result_index }}'
        city: '{{ city.name }}'
        url: "{{ this.data.url if this is defined and this.data is defined else '' }}"
        elapsed: "{{ (this.data.elapsed | default(0)) if this is defined and this.data is defined else 0 }}"
        payload: "{{ (this.data | tojson) if this is defined and this.data is defined else '' }}"
      storage: postgres
      auth:
        pg:
          type: postgres
          key: pg_local
      table: public.weather_http_raw
      mode: upsert
      key: id
  save:
    data:
      execution_id: '{{ execution_id }}'
      results_json: '{{ results | tojson }}'
      count: '{{ count }}'
    storage: postgres
    auth:
      pg:
        type: postgres
        key: pg_local
    table: public.weather_http_agg
    mode: upsert
    key: execution_id
  next:
  - step: end
- step: end
  desc: Finish and write metrics
  type: save
  storage: postgres
  auth:
    pg:
      type: postgres
      key: pg_local
  table: public.weather_pipeline_metrics
  mode: upsert
  key: execution_id
  data:
    execution_id: '{{ execution_id }}'
    pg_rows_saved: '{{ loop_http.count }}'
    gcs_flat_uri: ''
    gcs_agg_uri: ''
