# PyCharm local debug settings for NoETL
# PyCharm local debug environment for NoETL
# Copied from .env and adjusted for local debugging (server on 8083, Postgres via localhost:54321)

# NoETL environment file
# Copy this file to create your environment-specific files:
# - .env.common - Common variables for all environments
# - .env.dev - Development environment variables
# - .env.prod - Production environment variables
# - .env.local - Local overrides

ENVIRONMENT="demo"

# Google cloud
GOOGLE_CLOUD_PROJECT="noetl-demo-19700101"
SERVICE_ACCOUNT_EMAIL="noetl-service-account@noetl-demo-19700101.iam.gserviceaccount.com"
GOOGLE_APPLICATION_CREDENTIALS=".secrets/noetl-service-account.json"
GOOGLE_SECRET_POSTGRES_PASSWORD="projects/1014428265962/secrets/postgres-dev-password/versions/1"
GOOGLE_SECRET_API_KEY="projects/166428893489/secrets/api-dev-key"
GCS_ENDPOINT=https://storage.googleapis.com
GCS_REGION=us-central1

# Timezone Environment Variables
TZ=America/Chicago

# Database Configuration (Kubernetes Postgres exposed to host)
POSTGRES_USER=demo
POSTGRES_PASSWORD=demo
POSTGRES_SCHEMA=public
POSTGRES_DB=demo_noetl
POSTGRES_HOST=localhost
POSTGRES_PORT=54321
PGDATA=/var/lib/postgresql/data/pgdata

# Helpful DSNs for local tools
DATABASE_URL=postgresql+psycopg2://demo:demo@localhost:54321/demo_noetl
JDBC_DATABASE_URL=jdbc:postgresql://localhost:54321/demo_noetl

# NoETL API Server Configuration (local debug)
LOG_LEVEL=DEBUG
PYTHONPATH=/opt/noetl
NOETL_DATA_DIR=data
NOETL_USER=noetl
NOETL_PASSWORD=noetl
NOETL_SCHEMA=noetl
NOETL_DROP_SCHEMA=false
# Mandatory flag: when "true", the server will validate the schema and create missing tables on startup.
NOETL_SCHEMA_VALIDATE=false
NOETL_HOST=0.0.0.0
NOETL_PORT=8083
NOETL_ENABLE_UI=true
NOETL_DEBUG=true
NOETL_SERVER=uvicorn
NOETL_SERVER_WORKERS=1
NOETL_SERVER_RELOAD=false
NOETL_AUTO_RECREATE_RUNTIME=true
# Interval in seconds between sweeper iterations that mark stale runtimes offline
NOETL_RUNTIME_SWEEP_INTERVAL=15
# Seconds since last_heartbeat after which a runtime is marked offline
NOETL_RUNTIME_OFFLINE_SECONDS=60

# Mandatory server identity (required by Settings)
NOETL_SERVER_URL=http://localhost:8083
NOETL_SERVER_NAME=server-local

# For worker/debug tooling to target the local server explicitly
NOETL_API_URL=http://localhost:8083

# Jupyter Configuration
JUPYTER_TOKEN=noetl
# === API Server (local debug) ===
NOETL_RUN_MODE=server
NOETL_API_HOST=0.0.0.0
NOETL_API_PORT=8083
NOETL_API_URL=http://localhost:8083
LOG_LEVEL=DEBUG
PYTHONUNBUFFERED=1

# === Postgres (Kind/Kubernetes exposed to host) ===
# Using the forwarded/NodePort to access the cluster's Postgres from localhost
PGHOST=localhost
PGPORT=54321
PGUSER=demo
PGPASSWORD=demo
PGDATABASE=demo_noetl

# Common DSN formats some tools/components may read
DATABASE_URL=postgresql+psycopg2://demo:demo@localhost:54321/demo_noetl
JDBC_DATABASE_URL=jdbc:postgresql://localhost:54321/demo_noetl

# === NoETL Schema ===
NOETL_SCHEMA=noetl

# === Worker settings ===
# Worker will use NOETL_API_URL above to talk to the local server
# Additional worker options can be added here if needed, e.g.:
# NOETL_WORKER_ID=local-worker-1
# NOETL_WORKER_CONCURRENCY=1
