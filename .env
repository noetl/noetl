# Example environment file
# Copy this file to create your environment-specific files:
# - .env.common - Common variables for all environments
# - .env.dev - Development environment variables
# - .env.prod - Production environment variables
# - .env.local - Local overrides

PRJDIR="$(pwd)"
ENVIRONMENT="demo"
GOOGLE_CLOUD_PROJECT="noetl-demo-19700101"
SERVICE_ACCOUNT_EMAIL="noetl-service-account@noetl-demo-19700101.iam.gserviceaccount.com"
GOOGLE_APPLICATION_CREDENTIALS=".secrets/noetl-service-account.json"
GOOGLE_SECRET_POSTGRES_PASSWORD="projects/1014428265962/secrets/postgres-dev-password/versions/1"
GOOGLE_SECRET_API_KEY="projects/166428893489/secrets/api-dev-key"
GCS_ENDPOINT=https://storage.googleapis.com
GCS_REGION=us-central1
# LASTPASS_USERNAME="dev-user@noetl.io"
# LASTPASS_PASSWORD="dev-password"

# Docker Environment Variables
TZ=America/Chicago

# Database Configuration
POSTGRES_USER=demo
POSTGRES_PASSWORD=demo
POSTGRES_SCHEMA=public
POSTGRES_DB=demo_noetl
POSTGRES_HOST=localhost
POSTGRES_PORT=30543
PGDATA=/var/lib/postgresql/data/pgdata


# API Configuration
LOG_LEVEL=INFO
PYTHONPATH=/opt/noetl
NOETL_DATA_DIR=data
NOETL_USER=noetl
NOETL_PASSWORD=noetl
NOETL_SCHEMA=noetl
NOETL_ENCRYPTION_KEY=dfgdfgsdgsd


# Jupyter Configuration
JUPYTER_TOKEN=noetl

VITE_API_BASE_URL=/api


# ===============================
# NoETL Server/Broker/Worker runtime (local defaults)
# ===============================

# Server runtime
NOETL_HOST=0.0.0.0
NOETL_PORT=8082
# Base URL that broker/workers use to reach the server API
NOETL_SERVER_URL=http://localhost:8082
# When true, server's /api/agent/execute-async will only emit a REQUESTED event;
# broker loop should pick it up and execute. Set to true for event-driven mode.
NOETL_BROKER_MODE=false
# Broker loop settings
NOETL_BROKER_POLL_INTERVAL=2.0
NOETL_BROKER_HTTP_TIMEOUT=15
# 0 or unset means run indefinitely; a positive integer stops after processing N events
NOETL_BROKER_STOP_AFTER=0

# Worker API (self-contained worker pool)
NOETL_ENABLE_WORKER_API=false
NOETL_WORKER_HOST=0.0.0.0
NOETL_WORKER_PORT=8081
# Worker pool registration
NOETL_WORKER_POOL_RUNTIME=cpu
NOETL_WORKER_POOL_NAME=worker-cpu
# Base URL where this worker exposes its API (used to auto-register with server)
NOETL_WORKER_BASE_URL=http://localhost:8081/api/worker
NOETL_WORKER_CAPACITY=1
# Comma-separated list
NOETL_WORKER_LABELS=local,dev
# Worker execution/network timeouts and package install behavior
NOETL_WORKER_HTTP_TIMEOUT=60
NOETL_WORKER_PIP_TIMEOUT=300
NOETL_WORKER_ALLOW_INSTALLS=true

# Optional static routing for broker -> workers (overrides server registry lookup)
# NOETL_WORKER_CPU_URL=http://localhost:8081
# NOETL_WORKER_GPU_URL=http://localhost:9091
# NOETL_WORKER_QPU_URL=http://localhost:10081
# NOETL_WORKER_DEFAULT_URL=http://localhost:8081

# Optional second worker pool (e.g., GPU)
NOETL_WORKER2_ENABLE=false
NOETL_WORKER2_HOST=0.0.0.0
NOETL_WORKER2_PORT=9081
NOETL_WORKER2_RUNTIME=gpu
NOETL_WORKER2_NAME=worker-gpu
NOETL_WORKER2_BASE_URL=http://localhost:9081/api/worker
NOETL_WORKER2_CAPACITY=1
NOETL_WORKER2_LABELS=local,dev,gpu

# Tail filtering (reduce repeated poll lines)
NOETL_TAIL_FILTER_POLL=false

# --- Additional runtime / deregister tuning (dev) ---
# How long (in seconds) without a heartbeat before a runtime is considered stale and marked offline. Default: 60
NOETL_HEARTBEAT_TTL=60

# Deregister retry behavior used by broker/worker on shutdown (best-effort)
# Number of attempts to call the server deregister endpoint before giving up
NOETL_DEREGISTER_RETRIES=3
# Base backoff seconds for exponential backoff between deregister attempts
NOETL_DEREGISTER_BACKOFF=0.5

# Optional: when set, brokers will use this name during register/deregister. If unset, a hostname+pid name is generated.
# Example: NOETL_BROKER_NAME=broker-local-1
NOETL_BROKER_NAME=

# Optional: lower this in dev to see stale entries cleared faster (e.g. 5 or 10 seconds)
# NOETL_HEARTBEAT_TTL=10
